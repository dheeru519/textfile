import java.io.File
pipeline 
{
    agent any 
    options { 
        disableConcurrentBuilds() 
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '10'))
    }
    parameters {
        string(name: 'BuildNo', defaultValue: '1.0.$BUILD_NUMBER.0', description: 'Build Number')
    }
    stages { 
        stage("Set Build Name") {
            steps 
            {
                script {
                    currentBuild.displayName = "1.0.${BUILD_NUMBER}.0" 
		    def scmVars = checkout scm
  		    echo 'scm : the commit id is ' +scmVars.GIT_COMMIT
 		    echo 'scm : the commit branch  is ' +scmVars.GIT_BRANCH
  	            echo 'scm : the previous commit id is ' +scmVars.GIT_PREVIOUS_COMMIT
                }
            }
        }	
        stage('Info File Creation') {
		steps {
			script
				{
				  	dir("Common")
					{
						 bat 'echo %BuildNo% > Info.txt'
						 
						 //env.GIT_COMMIT_MSG = bat label: '', returnStdout: true, script: 'git log -1 --pretty=%B ${GIT_COMMIT}'
					 	 
						 //def author = sh script: "git show -s --pretty=\"%an <%ae>\" ${GIT_COMMIT}", returnStdout: true
						 
						 
				
 							//def Author_Details = bat(
							//script: 'git show --name-only',
							//returnStdout: true).split('\r\n')[2].trim()
							//echo "Author_Details: ${Author_Details}" 
							
							 //bat 'echo ${COMMITTER_EMAIL} >> Info.txt'
							
							 bat label: '', returnStdout: true, script: 'git show --name-only >> Info.txt'
							
							 def file = readFile('Info.txt')
							 echo "file:$file"
							 def JOB_Details = file.readLines()
							 echo "JOB_Details:$JOB_Details"
							 
							 
							 
							 //def AUTHOR_NAME = bat(
							 //script: returnStdout: true, "git log -1 --pretty=format:'%an'" >>  Info.txt"
							 //returnStdout: true).split('\r\n')[2].trim() 
							 //echo "AUTHOR_NAME: ${AUTHOR_NAME}" 
							 //def Author = readFile('Info.txt')
							 //def GITinfo = Author.readLines()
							 //echo "GITinfo:$GITinfo"

						 
							 //bat label: '', returnStdout: true, script: 'git log -1 >> Info.txt'
							 //def file = readFile('Info.txt')
							 //def GITinfo = file.readLines()
							 //echo "GITinfo:$GITinfo"	


							 //powershell 'Get-Date| Add-Content -Path .\\Info.txt'

							 powershell '''ForEach-Object { Add-Content -Path ".\\Info.txt" -Value "Calculation Engine Version: $env:BUILD_NUMBER","Github Repository: $env:GIT_URL","Commit Version: $env:GIT_COMMIT","Branch: $env:GIT_BRANCH" }'''

							 powershell '''Get-Content -Path ".\\Info.txt"'''
							 
				
               				}
			}	
		   
    		}
	}

   /* post {      
            success {
                archiveArtifacts 'common\\wise scripts\\*.exe'
		 
                emailext attachLog: true, body: '$DEFAULT_CONTENT', recipientProviders: [developers(), requestor()], replyTo: '$DEFAULT_REPLYTO', subject: '$DEFAULT_SUBJECT', to: 'Vijay.Bojjagani@carrier.com,Robert.Howe@carrier.com,Achalu.K.Tirfe@Carrier.com'

            }
          	 failure {
                emailext attachLog: true, body: '$DEFAULT_CONTENT', recipientProviders: [developers(), requestor()], replyTo: '$DEFAULT_REPLYTO', subject: '$DEFAULT_SUBJECT', to: 'shiva.kirla@carrier.com,Vijay.Bojjagani@carrier.com,Robert.Howe@carrier.com,Achalu.K.Tirfe@Carrier.com'
            	} 
    } */
}
}
